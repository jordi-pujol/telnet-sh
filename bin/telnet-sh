#!/bin/bash

#  Telnet client with built-in automatization.
#  $Revision: 0.4 $
#
#  Copyright (C) 2014-2016 Jordi Pujol Palomer <jordipujolp AT gmail DOT com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 1, or (at your option)
#  any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#  Please report bugs to <jordipujolp AT gmail DOT com>.
#
#************************************************************************

# Requires:
# - bash, enabled for tcp communications
# - Some other utilities, even reduced versions from busybox will work
#   awk, cat, mktemp, sed, tr, wc

set -o errexit -o noglob -o nounset

#DEBUG="y"
if [ -n "${DEBUG:-}" ]; then
	export PS4='+\t ${LINENO}:${FUNCNAME:+"${FUNCNAME}:"} '
	exec {BASH_XTRACEFD}> "$(mktemp /tmp/telnet-sh-XXXXXX)"
	set -o xtrace
fi

version="0.4"

usage() {
	echo "telnet-sh v${version}.

Usage: telnet-sh [-a] [-b] [-c script] [-d] [-l TUSER] [-p TPASS] [-s] HOST [PORT/SERVICE]

Connect to a telnet server.
Communication may be automatized with a script of commands.
This script has a limited set of commands that may use environment variables.
Variables TUSER and TPASS are set by the corresponding options.

	-a	Automatic login with \$USER variable
	-b	Batch mode, script required, will not watch for input from terminal,
		automatic switch to batch mode when stdin is not a terminal
	-c script	Execute commands from this file before going interactive,
		reads script from stdin when filename is '-' or stdin is not a terminal
	-d	Dump input stream to a file in dir /tmp, for debugging purposes
	-l TUSER	Automatic login as TUSER
	-p TPASS	TUSER password
	-s	silent run, don't write output to /dev/stdout" >&2
	:
}

_printf_printable() {
	printf '%s' "${@}" | tr -cd '[ -~]\n\r\t\b\033'
}

_kbd() {
	local a buffer
	buffer=""
	while kill -0 ${pid_comms} 2>/dev/null; do
		IFS= read -s -u0 -d $'\0' -n 1 -t 1 a || \
			continue
		if [ -z "${buffer}" -a "${a}" = "${ESC_CMD}" ]; then
			buffer="${a}"
			printf '\n%s' "CMD>" >&2
			continue
		fi
		if [ "${buffer:0:1}" = "${ESC_CMD}" ]; then
			_printf_printable "${a}" >&2
			if [ "${a}" = $'\n' ]; then
				case "${buffer:1}" in
				crlf) CRLF=$'\r\n'
					printf 'CMD: enabling conversion of CR to CR/LF.\n' >&2
					;;
				nocrlf) CRLF=""
					printf 'CMD: disabling CR conversion.\n' >&2
					;;
				echo) ECHO="y"
					printf 'CMD: enabling local echo.\n' >&2
					kill -s USR1 ${pid_comms}
					;;
				noecho) ECHO=""
					printf 'CMD: disabling local echo.\n' >&2
					kill -s USR2 ${pid_comms}
					;;
				backspace) BACKSPACE=$'\x08'
					printf 'CMD: enabling conversion of backspace to CTRL-H.\n' >&2
					;;
				nobackspace) BACKSPACE=""
					printf 'CMD: disabling backspace conversion.\n' >&2
					;;
				*) printf 'CMD: error, invalid command "%s".\n' "${buffer}" >&2
					;;
				esac
				kill -s HUP ${pid_comms}
				buffer=""
			else
				buffer+="${a}"
			fi
			continue
		fi
		[ "${a}" = $'\n' ] && buffer="" || buffer+="${a}"
		if ! kill -0 ${KBDDIS} 2>/dev/null; then
			case "${a}" in
			$'\n')
				[ -z "${CRLF}" ] || a="${CRLF}"
				;;
			$'\b')
				[ -z "${BACKSPACE}" ] || a="${BACKSPACE}"
				;;
			esac
			printf '%s' "${a}" >&${fdh}
			[ -z "${ECHO}" ] || printf '%s' "${a}"
		fi
	done
}

_comms() {
	local a
	local line lines
	local timeout timeout_short timeout_long buffer bufferc
	local exp_ans

exp_ans=()
line=0
timeout_short=5
timeout_long=600
buffer=""
bufferc=""

_read_cmd() {
	local cmd
	exp_ans=()
	while [ ${line} -lt ${lines} ]; do
		line=$((${line}+1))
		cmd=( $(sed -ne "${line}p" < "${SCRIPT}") )
		[ -n "${cmd[0]:-}" ] || continue
		case "${cmd[0]}" in
		expect)
			eval exp_ans=( $(sed -nre "${line}{\|^[[:blank:]]*expect[[:blank:]]+| s|||;p}" < "${SCRIPT}") )
			[ -z "${exp_ans[0]:-}" ] || return 0
			;;
		silent) SILENT="y";;
		nosilent) SILENT="";;
		interactive)
			if [ -z "${BATCH}" ]; then
				printf '\nscript exit, switching to interactive mode.\n' >&2
			else
				printf '\nscript stopped.\n' >&2
			fi
			_printf_printable "${buffer}"
			return 0
			;;
		conf|crlf|nocrlf|echo|noecho|backspace|nobackspace|\#*) :;;
		*)
			printf '\nscript error: invalid command "%s".\n' "${cmd[0]}" >&2
			[  -n "${BATCH}" ] || \
				printf 'Switching to interactive mode.\n' >&2
			_printf_printable "${buffer}"
			return 0
			;;
		esac
	done
	:
}

_reload() {
	[ -n "${SILENT}" ] || _printf_printable "${buffer}"
}

_echo() {
	ECHO="y"
}

_noecho() {
	ECHO=""
}

	trap _reload HUP
	trap _echo USR1
	trap _noecho USR2

	if [ -n "${SCRIPT}" ]; then
		lines="$(wc -l < "${SCRIPT}")"
		_read_cmd
	fi

	while :; do
		if [ -n "${exp_ans[0]:-}" -o -n "${BATCH}" ]; then
			timeout=${timeout_short}
		else
			timeout=${timeout_long}
			if [ -n "${KBDDIS}" ]; then
				kill -s TERM ${KBDDIS} 2>/dev/null
				wait ${KBDDIS} >/dev/null 2>&1 || :
				KBDDIS=""
			fi
		fi
		if IFS= read -u${fdh} -d $'\0' -n 1 -t ${timeout} a; then
			buffer+="${a}"
			c="$(case "${a}" in
				[[:print:]])
					printf '%s' "${a}";;
				*)
					printf '%%%02X' "'${a}";;
				esac)"
			bufferc+="${c}"
			[ -z "${DUMP}" ] || printf '%s' "${c}" >> "${DUMP}"
			[ -n "${SILENT}" ] || _printf_printable "${a}"
			if [ -n "${exp_ans[0]:-}" ]; then
				set -- "${exp_ans[@]}"
				while [ -n "${1:-}" ]; do
					if printf '%s' "${bufferc}" | grep -qse "${1}"; then
						if [ -n "${2}" ]; then
							printf "${2}" >&${fdh}
							[ -z "${ECHO}" ] || printf "${2}"
						fi
						_read_cmd
						break
					fi
					shift
					test -n "${1+"isset"}" || break
					shift
				done
			fi
			if [ "${a}" = $'\n' ]; then
				buffer=""
				bufferc=""
				[ -z "${DUMP}" ] || printf '\n' >> "${DUMP}"
			fi
		else
			printf '\n' >&2
			if [ -n "${exp_ans[0]:-}" ]; then
				printf 'Warning: Timeout while expecting "%s"\n' \
					"${exp_ans[0]}" >&2
				exp_ans=()
				if [  -z "${BATCH}" ]; then
					printf 'Switching to interactive mode.\n' >&2
					_printf_printable "${buffer}"
					continue
				fi
			fi
			[ -z "${BATCH}" ] || \
				printf 'Warning: Timeout while in Batch mode, ending session.\n' >&2
			break
		fi
	done

	if [ -n "${KBDDIS}" ]; then
		kill -s TERM ${KBDDIS} 2>/dev/null
		wait ${KBDDIS} >/dev/null 2>&1 || :
		KBDDIS=""
	fi

	printf '\n'
}

_initial_config() {
	local line=0 cmd rest
	[ -s "${SCRIPT}" ] || return 0
	while read cmd rest; do
		line=$((${line}+1))
		case "${cmd}" in
		conf) eval $(sed -rne "${line} {\|^[[:blank:]]*conf[[:blank:]]+| s|||;p}" < "${SCRIPT}")
 ;;
		crlf) CRLF=$'\r\n' ;;
		nocrlf) CRLF="" ;;
		echo) ECHO="y" ;;
		noecho) ECHO="" ;;
		backspace) BACKSPACE=$'\x08' ;;
		nobackspace) BACKSPACE="" ;;
		esac
	done < "${SCRIPT}"
	:
}

_exit() {
	trap - EXIT
	if [ -n "${KBDDIS}" ]; then
		kill -s TERM ${KBDDIS} 2>/dev/null
		wait ${KBDDIS} >/dev/null 2>&1 || :
	fi
	[ -z "${SCRIPT_STDIN}" ] || rm -f "${SCRIPT}"
}

AUTOLOGIN=""
BATCH=""
DUMP=""
KBDDIS=""
SCRIPT=""
SCRIPT_STDIN=""
TUSER=""
TPASS=""
SILENT=""
BACKSPACE=""
CRLF=""
ECHO=""
ESC_CMD=$'\x1D'

trap _exit EXIT

[ ! -s /etc/telnet-sh.conf ] || \
	. /etc/telnet-sh.conf

[ ! -s ~/.config/telnet-sh/telnet-sh.conf ] || \
	. ~/.config/telnet-sh/telnet-sh.conf

while getopts ":abc:dl:p:s" OPTION; do
	case $OPTION in
		a) AUTOLOGIN="y";;
		b) BATCH="y";;
		c) SCRIPT="${OPTARG}";;
		d) DUMP="y";;
		l) TUSER="${OPTARG}";;
		p) TPASS="${OPTARG}";;
		s) SILENT="y";;
	esac
done
shift $((OPTIND-1))
host="${1:-}"
if [ -z "${host}" ]; then
	usage
	exit 1
fi
shift
port=""
if [ -n "${1:-}" ]; then
	port="$(awk -v service="${1}" '$1 == service && \
	$2 ~ "/tcp" {print service; rc=-1; exit}
	END{exit rc+1}' < /etc/services)" || \
		port="$(awk -v port="${1}" \
			'BEGIN{if (port ~ "^[0-9]+$") print port+0}')"
else
	port="telnet"
fi
if [ -z "${port}" ]; then
	printf 'Error: Invalid port or service name.\n' >&2
	exit 1
fi

if [ -z "${TUSER}" -a -n "${AUTOLOGIN}" -a -n "${USER}" ]; then
	TUSER="${USER}"
fi

if [ -t 0 ]; then
	:
else
	if [ "${SCRIPT}" = "-" -o -z "${SCRIPT}" ]; then
		printf 'Warning: Reading script from stdin.\n' >&2
		SCRIPT="$(mktemp /tmp/telnet-sh-XXXXXX)"
		cat - > "${SCRIPT}" <&0
		SCRIPT_STDIN="y"
	fi
	if [ -z "${BATCH}" ]; then
		printf 'Warning: stdin is not a terminal. Setting BATCH mode.\n' >&2
		BATCH="y"
	fi
fi

if [ -n "${SCRIPT}" -a ! -s "${SCRIPT}" ]; then
	printf 'Error: Invalid script file %s.\n' "${SCRIPT_STDIN:-"${SCRIPT}"}" >&2
	exit 1
fi

if [ -n "${SCRIPT_STDIN}" -a -z "${BATCH}" ]; then
	printf 'Warning: reading input from stdin. Setting BATCH mode.\n' >&2
	BATCH="y"
fi

if [ ! -s "${SCRIPT}" -a -n "${BATCH}" ]; then
	printf 'Error: BATCH mode is enabled and no script specified.\n' >&2
	exit 1
fi

if [ -n "${DUMP}" ]; then
	DUMP="$(mktemp /tmp/telnet-sh-dump-XXXXXX)"
	printf 'Warning: Dumping input stream to file "%s".\n' "${DUMP}" >&2
fi

_initial_config

printf 'Connecting to host %s in port %s.\n' "${host}" "${port}" >&2
if ! exec {fdh}<>"/dev/tcp/$host/$port"; then
	printf 'Error: No success on connection.\n' >&2
	exit 1
fi

if [ -t 0 ]; then
	( while :; do
		sleep 3 &
		wait "${!}" || :
	done >/dev/null 2>&1 ) &
	KBDDIS="${!}"
fi

_comms &
pid_comms="${!}"

if [ -t 0 ]; then
	_kbd <&0 &
fi

wait >/dev/null 2>&1 || :
:
